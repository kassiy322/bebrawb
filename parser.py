import asyncio
import json
import logging
import os
import random
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import ClientSession, ClientTimeout

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BOT_TOKEN = "7929496116:AAHQg6ZqFy-Fo7cWoYDLaVZ6oCg0gOdz318"
CHECK_INTERVAL = 3600
DATA_FILE = "tracked_items.json"
TIMEOUT = ClientTimeout(total=30)

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 17_2_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Mobile/15E148 Safari/604.1"
]

def get_random_headers():
    return {
        'User-Agent': random.choice(USER_AGENTS),
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Cache-Control': 'max-age=0'
    }

tracked_items = {}
adding_discount = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫–∏–¥–∫–∏

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump(tracked_items, f)

def extract_product_id(url):
    match = re.search(r'/catalog/(\d+)/', url)
    if match:
        return match.group(1)
    return None

async def fetch_prices(url):
    product_id = extract_product_id(url)
    if not product_id:
        return None, None

    api_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=27&nm={product_id}"

    await asyncio.sleep(random.uniform(1, 5))

    try:
        async with ClientSession(timeout=TIMEOUT) as session:
            async with session.get(api_url, headers=get_random_headers()) as response:
                if response.status == 200:
                    data = await response.json()
                    try:
                        product_data = data['data']['products'][0]
                        current_price = product_data['salePriceU'] // 100
                        old_price = product_data.get('priceU', current_price) // 100
                        return current_price, old_price
                    except (KeyError, IndexError) as e:
                        logger.error(f"Error parsing price from API response: {str(e)}")
                else:
                    logger.error(f"API request failed with status {response.status}")
    except Exception as e:
        logger.error(f"Error fetching price: {str(e)}")
    return None, None

async def check_prices(bot: Bot):
    while True:
        try:
            for user_id, items in tracked_items.items():
                for url, data in items.items():
                    old_price = data['price']
                    current_price, original_price = await fetch_prices(url)
                    if current_price and current_price != old_price:
                        price_diff = original_price - current_price
                        percent_diff = round((price_diff / original_price) * 100, 2)
                        response_message = (f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n"
                                           f"üîó {url}\n"
                                           f"üìâ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {original_price}‚ÇΩ\n"
                                           f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n"
                                           f"üí∏ –°–Ω–∏–∂–µ–Ω–∏–µ: {price_diff}‚ÇΩ ({percent_diff}%)\n")
                        if 'discount_price' in data:
                            response_message += f"–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ–π —Å–∫–∏–¥–∫–∏ WB –∫–æ—à–µ–ª—å–∫–∞: {data['discount_price']}‚ÇΩ\n"
                        response_message += f"{'üî• –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å!' if current_price < original_price else '‚ö†Ô∏è –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞!'}"
                        try:
                            await bot.send_message(user_id, response_message)
                            tracked_items[user_id][url]['price'] = current_price
                            save_data()
                        except Exception as e:
                            logger.error(f"Message error {user_id}: {str(e)}")
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            logger.error(f"Check prices error: {str(e)}")
            await asyncio.sleep(60)

async def main():
    global tracked_items
    tracked_items = load_data()
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
    start_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")],
            [KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ],
        resize_keyboard=True
    )

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await message.answer(
            "ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Wildberries\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=start_keyboard
        )

    @dp.message(lambda message: message.text == "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
    async def track_item(message: types.Message):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")

    @dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
    async def list_items(message: types.Message):
        user_id = str(message.from_user.id)
        if user_id not in tracked_items or not tracked_items[user_id]:
            await message.answer("üìã –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return

        items_list = []
        for url, data in tracked_items[user_id].items():
            current_price, original_price = await fetch_prices(url)
            if current_price:
                price_diff = original_price - current_price
                percent_diff = round((price_diff / original_price) * 100, 2)
                item_message = (f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n"
                               f"üîó {url}\n"
                               f"üìâ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {original_price}‚ÇΩ\n"
                               f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n"
                               f"üí∏ –°–Ω–∏–∂–µ–Ω–∏–µ: {price_diff}‚ÇΩ ({percent_diff}%)\n")
                if 'discount_price' in data:
                    item_message += f"–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ–π —Å–∫–∏–¥–∫–∏ WB –∫–æ—à–µ–ª—å–∫–∞: {data['discount_price']}‚ÇΩ\n"
                item_message += f"{'üî• –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å!' if current_price < original_price else '‚ö†Ô∏è –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞!'}"
                items_list.append(item_message)

        await message.answer("üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n" + "\n\n".join(items_list))

    @dp.message(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    async def stop_tracking(message: types.Message):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:")

    @dp.message(lambda message: "wildberries.ru" in message.text and tracked_items.get(str(message.from_user.id), {}))
    async def handle_stop_tracking_url(message: types.Message):
        user_id = str(message.from_user.id)
        if user_id in adding_discount and adding_discount[user_id]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫—É
            url = message.text.strip()
            if user_id in tracked_items and url in tracked_items[user_id]:
                adding_discount[user_id] = url  # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ WB –∫–æ—à–µ–ª—å–∫–∞:")
            else:
                await message.answer(f"‚ùå –¢–æ–≤–∞—Ä {url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
                adding_discount[user_id] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π URL
            url = message.text.strip()
            if user_id in tracked_items and url in tracked_items[user_id]:
                del tracked_items[user_id][url]
                save_data()
                await message.answer(f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {url} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                await message.answer(f"‚ùå –¢–æ–≤–∞—Ä {url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")

    @dp.message(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    async def stop_all_tracking(message: types.Message):
        user_id = str(message.from_user.id)
        if user_id in tracked_items and tracked_items[user_id]:
            tracked_items[user_id] = {}
            save_data()
            await message.answer("‚úÖ –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π")

    @dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞")
    async def add_wb_discount(message: types.Message):
        user_id = str(message.from_user.id)
        adding_discount[user_id] = True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫—É
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL —Ç–æ–≤–∞—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞:")

    @dp.message(lambda message: message.text.isdigit() and str(message.from_user.id) in adding_discount)
    async def handle_wb_discount_price(message: types.Message):
        user_id = str(message.from_user.id)
        discount_price = int(message.text.strip())
        url = adding_discount[user_id]  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL
        if user_id in tracked_items and url in tracked_items[user_id]:
            tracked_items[user_id][url]['discount_price'] = discount_price
            save_data()
            await message.answer(f"‚úÖ –¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ WB –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {url} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {discount_price}‚ÇΩ")
        else:
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä {url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
        adding_discount[user_id] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    @dp.message(lambda message: "wildberries.ru" in message.text and not tracked_items.get(str(message.from_user.id), {}))
    async def handle_track_url(message: types.Message):
        url = message.text.strip()
        await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é —Ü–µ–Ω—É...")
        current_price, original_price = await fetch_prices(url)
        if current_price:
            user_id = str(message.from_user.id)
            if user_id not in tracked_items:
                tracked_items[user_id] = {}
            tracked_items[user_id][url] = {'price': current_price}
            save_data()
            price_diff = original_price - current_price
            percent_diff = round((price_diff / original_price) * 100, 2)
            response_message = (f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n"
                               f"üîó {url}\n"
                               f"üìâ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {original_price}‚ÇΩ\n"
                               f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n"
                               f"üí∏ –°–Ω–∏–∂–µ–Ω–∏–µ: {price_diff}‚ÇΩ ({percent_diff}%)\n"
                               f"{'üî• –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å!' if current_price < original_price else '‚ö†Ô∏è –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞!'}")
            await message.answer(response_message)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")

    asyncio.create_task(check_prices(bot))

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())